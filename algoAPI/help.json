{
    "algorithms": [
        "InsertionSort",
        "BubbleSort",
        "SelectionSort",
        "QuickSort",
        "MergeSort",
        "bf",
		"bfbrec",
		"reduce",
		"greedy",
		"greedyplus",
		"greedyrnd",
		"gonzalez1c",
		"gonzalezplus",
		"gonzalezrnd",
		"plesnikrnd",
		"plesnikdeg",
		"hochbaumshmoys",
		"hochbaumshmoysbin",
		"bottleneck",
		"score",
		"CDSP",
		"CDSh",
		"CDSPh",
		"CDS"],
    "help":[
        {
            "algorithm":"InsertionSort",
            "category":"SortingAlgorithm",
			"description":"Sorts an array of numbers in the selected order.",
			"inputFormat":"Input has to be a sequence of whole numbers, separated by a comma (,).",
			"inputExample":"10,-3,123,5000,0",
			"parametersFormat":"Parameter 1: Sorting order; Options: 'ascending', 'descending'; Default: 'ascending'",
            "parametersExample":"['ascending']",
			"outputFormat":"A sequence of ordered numbers is returned, separated by spaces",
			"outputExample":"-3 0 10 123 5000"
        },
        {
            "algorithm":"BubbleSort",
            "category":"SortingAlgorithm",
			"description":"Sorts an array of numbers in the selected order.",
			"inputFormat":"Input has to be a sequence of whole numbers, separated by a comma (,).",
			"inputExample":"10,-3,123,5000,0",
			"parametersFormat":"Parameter 1: Sorting order; Options: 'ascending', 'descending'; Default: 'ascending'",
            "parametersExample":"['ascending']",
			"outputFormat":"A sequence of ordered numbers is returned, separated by spaces",
			"outputExample":"-3 0 10 123 5000"
        },
        {
            "algorithm":"SelectionSort",
            "category":"SortingAlgorithm",
			"description":"Sorts an array of numbers in the selected order.",
			"inputFormat":"Input has to be a sequence of whole numbers, separated by a comma (,).",
			"inputExample":"10,-3,123,5000,0",
			"parametersFormat":"Parameter 1: Sorting order; Options: 'ascending', 'descending'; Default: 'ascending'",
            "parametersExample":"['ascending']",
			"outputFormat":"A sequence of ordered numbers is returned, separated by spaces",
			"outputExample":"-3 0 10 123 5000"
        },
        {
            "algorithm":"MergeSort",
            "category":"SortingAlgorithm",
			"description":"Sorts an array of numbers in the selected order.",
			"inputFormat":"Input has to be a sequence of whole numbers, separated by a comma (,).",
			"inputExample":"10,-3,123,5000,0",
			"parametersFormat":"Parameter 1: Sorting order; Options: 'ascending', 'descending'; Default: 'ascending'",
            "parametersExample":"['ascending']",
			"outputFormat":"A sequence of ordered numbers is returned, separated by spaces",
			"outputExample":"-3 0 10 123 5000"
        },
        {
            "algorithm":"QuickSort",
            "category":"SortingAlgorithm",
			"description":"Sorts an array of numbers in the selected order.",
			"inputFormat":"Input has to be a sequence of whole numbers, separated by a comma (,).",
			"inputExample":"10,-3,123,5000,0",
			"parametersFormat":"Parameter 1: Sorting order; Options: 'ascending', 'descending'; Default: 'ascending'",
            "parametersExample":"['ascending']",
			"outputFormat":"A sequence of ordered numbers is returned, separated by spaces",
			"outputExample":"-3 0 10 123 5000"
        },
		{
            "algorithm":"bf",
            "category":"KcenterAlgorithm",
			"description":"Using the bruteforce algorithm, solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"*vertices 100 *arcs 1 2 30 2 3 46 3 4 1 4 5 28 5 6 31 6 7 69 7 8 39 8 9 14 9 10 84 10 11 59 11 12 10 12 13 28 13 14 63 14 15 9 15 16 100 16 17 98 17 18 70 18 19 94 19 20 22 20 21 14 21 22 87 22 23 82 23 24 55 24 25 2 25 26 32 26 27 77 27 28 95 28 29 29 29 30 59 30 31 91 31 32 89 32 33 50 33 34 40 34 35 88 35 36 94 36 37 60 37 38 21 38 39 89 39 40 47 40 41 63 41 42 45 42 43 46 43 44 24 44 45 77 45 46 60 46 47 45 47 48 50 48 49 93 49 50 22 50 51 84 51 52 16 52 53 85 53 54 68 54 55 93 55 56 37 56 57 26 57 58 29 58 59 38 59 60 10 60 61 32 61 62 67 62 63 66 63 64 52 64 65 19 65 66 39 66 67 12 67 68 86 68 69 72 69 70 73 70 71 65 71 72 2 72 73 8 73 74 96 74 75 43 75 76 39 76 77 61 77 78 90 78 79 8 79 80 58 80 81 91 81 82 58 82 83 13 83 84 79 84 85 59 85 86 28 86 87 46 87 88 24 88 89 63 89 90 81 90 91 14 91 92 52 92 93 64 93 94 75 94 95 71 95 96 51 96 97 75 97 98 57 98 99 31 99 100 49 100 1 88 80 5 90 85 69 51 20 19 30 85 13 22 81 95 54 58 73 37 64 51 89 39 76 89 13 8 77 91 76 51 52 95 96 91 75 33 80 91 84 35 80 46 54 86 35 30 70 5 19 7 9 74 53 50 11 37 4 19 92 70 62 94 96 60 52 34 24 59 63 42 45 68 19 60 53 60 27 86 15 50 31 38 18 27 81 30 99 1 29 6 22 52 11 54 59 75 5 7 8 41 44 80 41 76 42 44 12 56 61 65 73 20 93 35 9 99 28 45 68 19 16 79 96 13 42 3 68 4 28 58 17 60 21 81 34 35 7 7 21 14 82 26 32 26 6 63 83 31 69 53 91 78 32 45 59 33 42 57 5 8 53 66 65 94 61 94 90 63 73 33 88 39 21 59 42 85 34 30 57 37 34 94 52 62 38 56 26 29 20 48 98 53 4 33 45 31 63 82 8 52 31 37 81 14 50 27 16 27 14 48 88 33 8 56 30 76 87 91 17 33 49 77 70 30 74 25 99 19 95 30 96 14 85 90 49 8 96 96 5 87 73 4 41 99 32 35 95 1 31 99 3 49 18 75 100 58 47 68 35 60 5 38 16 70 54 40 52 95 55 47 54 17 45 9 83 75 97 66 81 9 48 92 90 95 96 4 27 27 75 22 48 62 7 55 79 3 57 15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format is 'graph' or 'pajek'",
            "parametersExample":"['pajek','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"127"
        },
		{
            "algorithm":"bfbrec",
            "category":"KcenterAlgorithm",
			"description":"Using the bruteforce algorithm (recursive dominating set variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format is 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"reduce",
            "category":"KcenterAlgorithm",
			"description":"Using the bruteforce algorithm (recursive dominating set with reduction variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":" 100 200 5   1 2 30   2 3 46   3 4 1   4 5 28   5 6 31   6 7 69   7 8 39   8 9 14   9 10 84   10 11 59   11 12 10   12 13 28   13 14 63   14 15 9   15 16 100   16 17 98   17 18 70   18 19 94   19 20 22   20 21 14   21 22 87   22 23 82   23 24 55   24 25 2   25 26 32   26 27 77   27 28 95   28 29 29   29 30 59   30 31 91   31 32 89   32 33 50   33 34 40   34 35 88   35 36 94   36 37 60   37 38 21   38 39 89   39 40 47   40 41 63   41 42 45   42 43 46   43 44 24   44 45 77   45 46 60   46 47 45   47 48 50   48 49 93   49 50 22   50 51 84   51 52 16   52 53 85   53 54 68   54 55 93   55 56 37   56 57 26   57 58 29   58 59 38   59 60 10   60 61 32   61 62 67   62 63 66   63 64 52   64 65 19   65 66 39   66 67 12   67 68 86   68 69 72   69 70 73   70 71 65   71 72 2   72 73 8   73 74 96   74 75 43   75 76 39   76 77 61   77 78 90   78 79 8   79 80 58   80 81 91   81 82 58   82 83 13   83 84 79   84 85 59   85 86 28   86 87 46   87 88 24   88 89 63   89 90 81   90 91 14   91 92 52   92 93 64   93 94 75   94 95 71   95 96 51   96 97 75   97 98 57   98 99 31   99 100 49   100 1 88   80 5 90   85 69 51   20 19 30   85 13 22   81 95 54   58 73 37   64 51 89   39 76 89   13 8 77   91 76 51   52 95 96   91 75 33   80 91 84   35 80 46   54 86 35   30 70 5   19 7 9   74 53 50   11 37 4   19 92 70   62 94 96   60 52 34   24 59 63   42 45 68   19 60 53   60 27 86   15 50 31   38 18 27   81 30 99   1 29 6   22 52 11   54 59 75   5 7 8   41 44 80   41 76 42   44 12 56   61 65 73   20 93 35   9 99 28   45 68 19   16 79 96   13 42 3   68 4 28   58 17 60   21 81 34   35 7 7   21 14 82   26 32 26   6 63 83   31 69 53   91 78 32   45 59 33   42 57 5   8 53 66   65 94 61   94 90 63   73 33 88   39 21 59   42 85 34   30 57 37   34 94 52   62 38 56   26 29 20   48 98 53   4 33 45   31 63 82   8 52 31   37 81 14   50 27 16   27 14 48   88 33 8   56 30 76   87 91 17   33 49 77   70 30 74   25 99 19   95 30 96   14 85 90   49 8 96   96 5 87   73 4 41   99 32 35   95 1 31   99 3 49   18 75 100   58 47 68   35 60 5   38 16 70   54 40 52   95 55 47   54 17 45   9 83 75   97 66 81   9 48 92   90 95 96   4 27 27   75 22 48   62 7 55   79 3 57   15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pmed']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"162"
        },
		{
            "algorithm":"greedy",
            "category":"KcenterAlgorithm",
			"description":"Using the greedy algorithm (same heuristics for every vertice), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"greedyrnd",
            "category":"KcenterAlgorithm",
			"description":"Using the greedy algorithm (random starting vertice), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":" 100 200 5   1 2 30   2 3 46   3 4 1   4 5 28   5 6 31   6 7 69   7 8 39   8 9 14   9 10 84   10 11 59   11 12 10   12 13 28   13 14 63   14 15 9   15 16 100   16 17 98   17 18 70   18 19 94   19 20 22   20 21 14   21 22 87   22 23 82   23 24 55   24 25 2   25 26 32   26 27 77   27 28 95   28 29 29   29 30 59   30 31 91   31 32 89   32 33 50   33 34 40   34 35 88   35 36 94   36 37 60   37 38 21   38 39 89   39 40 47   40 41 63   41 42 45   42 43 46   43 44 24   44 45 77   45 46 60   46 47 45   47 48 50   48 49 93   49 50 22   50 51 84   51 52 16   52 53 85   53 54 68   54 55 93   55 56 37   56 57 26   57 58 29   58 59 38   59 60 10   60 61 32   61 62 67   62 63 66   63 64 52   64 65 19   65 66 39   66 67 12   67 68 86   68 69 72   69 70 73   70 71 65   71 72 2   72 73 8   73 74 96   74 75 43   75 76 39   76 77 61   77 78 90   78 79 8   79 80 58   80 81 91   81 82 58   82 83 13   83 84 79   84 85 59   85 86 28   86 87 46   87 88 24   88 89 63   89 90 81   90 91 14   91 92 52   92 93 64   93 94 75   94 95 71   95 96 51   96 97 75   97 98 57   98 99 31   99 100 49   100 1 88   80 5 90   85 69 51   20 19 30   85 13 22   81 95 54   58 73 37   64 51 89   39 76 89   13 8 77   91 76 51   52 95 96   91 75 33   80 91 84   35 80 46   54 86 35   30 70 5   19 7 9   74 53 50   11 37 4   19 92 70   62 94 96   60 52 34   24 59 63   42 45 68   19 60 53   60 27 86   15 50 31   38 18 27   81 30 99   1 29 6   22 52 11   54 59 75   5 7 8   41 44 80   41 76 42   44 12 56   61 65 73   20 93 35   9 99 28   45 68 19   16 79 96   13 42 3   68 4 28   58 17 60   21 81 34   35 7 7   21 14 82   26 32 26   6 63 83   31 69 53   91 78 32   45 59 33   42 57 5   8 53 66   65 94 61   94 90 63   73 33 88   39 21 59   42 85 34   30 57 37   34 94 52   62 38 56   26 29 20   48 98 53   4 33 45   31 63 82   8 52 31   37 81 14   50 27 16   27 14 48   88 33 8   56 30 76   87 91 17   33 49 77   70 30 74   25 99 19   95 30 96   14 85 90   49 8 96   96 5 87   73 4 41   99 32 35   95 1 31   99 3 49   18 75 100   58 47 68   35 60 5   38 16 70   54 40 52   95 55 47   54 17 45   9 83 75   97 66 81   9 48 92   90 95 96   4 27 27   75 22 48   62 7 55   79 3 57   15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pmed']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"137"
        },
		{
            "algorithm":"greedyplus",
            "category":"KcenterAlgorithm",
			"description":"Using the greedy algorithm (every possible starting vertice, only best score is returned), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"gonzalez1c",
            "category":"KcenterAlgorithm",
			"description":"Using the gonzalez algorithm (solution to 1-center problem used as starting vertice), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":" 100 200 5   1 2 30   2 3 46   3 4 1   4 5 28   5 6 31   6 7 69   7 8 39   8 9 14   9 10 84   10 11 59   11 12 10   12 13 28   13 14 63   14 15 9   15 16 100   16 17 98   17 18 70   18 19 94   19 20 22   20 21 14   21 22 87   22 23 82   23 24 55   24 25 2   25 26 32   26 27 77   27 28 95   28 29 29   29 30 59   30 31 91   31 32 89   32 33 50   33 34 40   34 35 88   35 36 94   36 37 60   37 38 21   38 39 89   39 40 47   40 41 63   41 42 45   42 43 46   43 44 24   44 45 77   45 46 60   46 47 45   47 48 50   48 49 93   49 50 22   50 51 84   51 52 16   52 53 85   53 54 68   54 55 93   55 56 37   56 57 26   57 58 29   58 59 38   59 60 10   60 61 32   61 62 67   62 63 66   63 64 52   64 65 19   65 66 39   66 67 12   67 68 86   68 69 72   69 70 73   70 71 65   71 72 2   72 73 8   73 74 96   74 75 43   75 76 39   76 77 61   77 78 90   78 79 8   79 80 58   80 81 91   81 82 58   82 83 13   83 84 79   84 85 59   85 86 28   86 87 46   87 88 24   88 89 63   89 90 81   90 91 14   91 92 52   92 93 64   93 94 75   94 95 71   95 96 51   96 97 75   97 98 57   98 99 31   99 100 49   100 1 88   80 5 90   85 69 51   20 19 30   85 13 22   81 95 54   58 73 37   64 51 89   39 76 89   13 8 77   91 76 51   52 95 96   91 75 33   80 91 84   35 80 46   54 86 35   30 70 5   19 7 9   74 53 50   11 37 4   19 92 70   62 94 96   60 52 34   24 59 63   42 45 68   19 60 53   60 27 86   15 50 31   38 18 27   81 30 99   1 29 6   22 52 11   54 59 75   5 7 8   41 44 80   41 76 42   44 12 56   61 65 73   20 93 35   9 99 28   45 68 19   16 79 96   13 42 3   68 4 28   58 17 60   21 81 34   35 7 7   21 14 82   26 32 26   6 63 83   31 69 53   91 78 32   45 59 33   42 57 5   8 53 66   65 94 61   94 90 63   73 33 88   39 21 59   42 85 34   30 57 37   34 94 52   62 38 56   26 29 20   48 98 53   4 33 45   31 63 82   8 52 31   37 81 14   50 27 16   27 14 48   88 33 8   56 30 76   87 91 17   33 49 77   70 30 74   25 99 19   95 30 96   14 85 90   49 8 96   96 5 87   73 4 41   99 32 35   95 1 31   99 3 49   18 75 100   58 47 68   35 60 5   38 16 70   54 40 52   95 55 47   54 17 45   9 83 75   97 66 81   9 48 92   90 95 96   4 27 27   75 22 48   62 7 55   79 3 57   15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pmed']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"162"
        },
		{
            "algorithm":"gonzalezrnd",
            "category":"KcenterAlgorithm",
			"description":"Using the gonzalez algorithm (random starting vertice), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"*vertices 100 *arcs 1 2 30 2 3 46 3 4 1 4 5 28 5 6 31 6 7 69 7 8 39 8 9 14 9 10 84 10 11 59 11 12 10 12 13 28 13 14 63 14 15 9 15 16 100 16 17 98 17 18 70 18 19 94 19 20 22 20 21 14 21 22 87 22 23 82 23 24 55 24 25 2 25 26 32 26 27 77 27 28 95 28 29 29 29 30 59 30 31 91 31 32 89 32 33 50 33 34 40 34 35 88 35 36 94 36 37 60 37 38 21 38 39 89 39 40 47 40 41 63 41 42 45 42 43 46 43 44 24 44 45 77 45 46 60 46 47 45 47 48 50 48 49 93 49 50 22 50 51 84 51 52 16 52 53 85 53 54 68 54 55 93 55 56 37 56 57 26 57 58 29 58 59 38 59 60 10 60 61 32 61 62 67 62 63 66 63 64 52 64 65 19 65 66 39 66 67 12 67 68 86 68 69 72 69 70 73 70 71 65 71 72 2 72 73 8 73 74 96 74 75 43 75 76 39 76 77 61 77 78 90 78 79 8 79 80 58 80 81 91 81 82 58 82 83 13 83 84 79 84 85 59 85 86 28 86 87 46 87 88 24 88 89 63 89 90 81 90 91 14 91 92 52 92 93 64 93 94 75 94 95 71 95 96 51 96 97 75 97 98 57 98 99 31 99 100 49 100 1 88 80 5 90 85 69 51 20 19 30 85 13 22 81 95 54 58 73 37 64 51 89 39 76 89 13 8 77 91 76 51 52 95 96 91 75 33 80 91 84 35 80 46 54 86 35 30 70 5 19 7 9 74 53 50 11 37 4 19 92 70 62 94 96 60 52 34 24 59 63 42 45 68 19 60 53 60 27 86 15 50 31 38 18 27 81 30 99 1 29 6 22 52 11 54 59 75 5 7 8 41 44 80 41 76 42 44 12 56 61 65 73 20 93 35 9 99 28 45 68 19 16 79 96 13 42 3 68 4 28 58 17 60 21 81 34 35 7 7 21 14 82 26 32 26 6 63 83 31 69 53 91 78 32 45 59 33 42 57 5 8 53 66 65 94 61 94 90 63 73 33 88 39 21 59 42 85 34 30 57 37 34 94 52 62 38 56 26 29 20 48 98 53 4 33 45 31 63 82 8 52 31 37 81 14 50 27 16 27 14 48 88 33 8 56 30 76 87 91 17 33 49 77 70 30 74 25 99 19 95 30 96 14 85 90 49 8 96 96 5 87 73 4 41 99 32 35 95 1 31 99 3 49 18 75 100 58 47 68 35 60 5 38 16 70 54 40 52 95 55 47 54 17 45 9 83 75 97 66 81 9 48 92 90 95 96 4 27 27 75 22 48 62 7 55 79 3 57 15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pajek','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"187"
        },
		{
            "algorithm":"gonzalezplus",
            "category":"KcenterAlgorithm",
			"description":"Using the gonzalez algorithm (every possible starting vertice, only best score is returned), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"plesnikrnd",
            "category":"KcenterAlgorithm",
			"description":"Using the plesnik algorithm (random starting vertice), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"plesnikrnd",
            "category":"KcenterAlgorithm",
			"description":"Using the plesnik algorithm (starting vertice determined with falling level method), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"*vertices 100 *arcs 1 2 30 2 3 46 3 4 1 4 5 28 5 6 31 6 7 69 7 8 39 8 9 14 9 10 84 10 11 59 11 12 10 12 13 28 13 14 63 14 15 9 15 16 100 16 17 98 17 18 70 18 19 94 19 20 22 20 21 14 21 22 87 22 23 82 23 24 55 24 25 2 25 26 32 26 27 77 27 28 95 28 29 29 29 30 59 30 31 91 31 32 89 32 33 50 33 34 40 34 35 88 35 36 94 36 37 60 37 38 21 38 39 89 39 40 47 40 41 63 41 42 45 42 43 46 43 44 24 44 45 77 45 46 60 46 47 45 47 48 50 48 49 93 49 50 22 50 51 84 51 52 16 52 53 85 53 54 68 54 55 93 55 56 37 56 57 26 57 58 29 58 59 38 59 60 10 60 61 32 61 62 67 62 63 66 63 64 52 64 65 19 65 66 39 66 67 12 67 68 86 68 69 72 69 70 73 70 71 65 71 72 2 72 73 8 73 74 96 74 75 43 75 76 39 76 77 61 77 78 90 78 79 8 79 80 58 80 81 91 81 82 58 82 83 13 83 84 79 84 85 59 85 86 28 86 87 46 87 88 24 88 89 63 89 90 81 90 91 14 91 92 52 92 93 64 93 94 75 94 95 71 95 96 51 96 97 75 97 98 57 98 99 31 99 100 49 100 1 88 80 5 90 85 69 51 20 19 30 85 13 22 81 95 54 58 73 37 64 51 89 39 76 89 13 8 77 91 76 51 52 95 96 91 75 33 80 91 84 35 80 46 54 86 35 30 70 5 19 7 9 74 53 50 11 37 4 19 92 70 62 94 96 60 52 34 24 59 63 42 45 68 19 60 53 60 27 86 15 50 31 38 18 27 81 30 99 1 29 6 22 52 11 54 59 75 5 7 8 41 44 80 41 76 42 44 12 56 61 65 73 20 93 35 9 99 28 45 68 19 16 79 96 13 42 3 68 4 28 58 17 60 21 81 34 35 7 7 21 14 82 26 32 26 6 63 83 31 69 53 91 78 32 45 59 33 42 57 5 8 53 66 65 94 61 94 90 63 73 33 88 39 21 59 42 85 34 30 57 37 34 94 52 62 38 56 26 29 20 48 98 53 4 33 45 31 63 82 8 52 31 37 81 14 50 27 16 27 14 48 88 33 8 56 30 76 87 91 17 33 49 77 70 30 74 25 99 19 95 30 96 14 85 90 49 8 96 96 5 87 73 4 41 99 32 35 95 1 31 99 3 49 18 75 100 58 47 68 35 60 5 38 16 70 54 40 52 95 55 47 54 17 45 9 83 75 97 66 81 9 48 92 90 95 96 4 27 27 75 22 48 62 7 55 79 3 57 15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pajek','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"195"
        },
		{
            "algorithm":"hochbaumshmoys",
            "category":"KcenterAlgorithm",
			"description":"Using the Hochbaum-Shmoys algorithm , solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pmed']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"94"
        },
		{
            "algorithm":"hochbaumshmoysbin",
            "category":"KcenterAlgorithm",
			"description":"Using the Hochbaum-Shmoys algorithm (bin variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"*vertices 100 *arcs 1 2 30 2 3 46 3 4 1 4 5 28 5 6 31 6 7 69 7 8 39 8 9 14 9 10 84 10 11 59 11 12 10 12 13 28 13 14 63 14 15 9 15 16 100 16 17 98 17 18 70 18 19 94 19 20 22 20 21 14 21 22 87 22 23 82 23 24 55 24 25 2 25 26 32 26 27 77 27 28 95 28 29 29 29 30 59 30 31 91 31 32 89 32 33 50 33 34 40 34 35 88 35 36 94 36 37 60 37 38 21 38 39 89 39 40 47 40 41 63 41 42 45 42 43 46 43 44 24 44 45 77 45 46 60 46 47 45 47 48 50 48 49 93 49 50 22 50 51 84 51 52 16 52 53 85 53 54 68 54 55 93 55 56 37 56 57 26 57 58 29 58 59 38 59 60 10 60 61 32 61 62 67 62 63 66 63 64 52 64 65 19 65 66 39 66 67 12 67 68 86 68 69 72 69 70 73 70 71 65 71 72 2 72 73 8 73 74 96 74 75 43 75 76 39 76 77 61 77 78 90 78 79 8 79 80 58 80 81 91 81 82 58 82 83 13 83 84 79 84 85 59 85 86 28 86 87 46 87 88 24 88 89 63 89 90 81 90 91 14 91 92 52 92 93 64 93 94 75 94 95 71 95 96 51 96 97 75 97 98 57 98 99 31 99 100 49 100 1 88 80 5 90 85 69 51 20 19 30 85 13 22 81 95 54 58 73 37 64 51 89 39 76 89 13 8 77 91 76 51 52 95 96 91 75 33 80 91 84 35 80 46 54 86 35 30 70 5 19 7 9 74 53 50 11 37 4 19 92 70 62 94 96 60 52 34 24 59 63 42 45 68 19 60 53 60 27 86 15 50 31 38 18 27 81 30 99 1 29 6 22 52 11 54 59 75 5 7 8 41 44 80 41 76 42 44 12 56 61 65 73 20 93 35 9 99 28 45 68 19 16 79 96 13 42 3 68 4 28 58 17 60 21 81 34 35 7 7 21 14 82 26 32 26 6 63 83 31 69 53 91 78 32 45 59 33 42 57 5 8 53 66 65 94 61 94 90 63 73 33 88 39 21 59 42 85 34 30 57 37 34 94 52 62 38 56 26 29 20 48 98 53 4 33 45 31 63 82 8 52 31 37 81 14 50 27 16 27 14 48 88 33 8 56 30 76 87 91 17 33 49 77 70 30 74 25 99 19 95 30 96 14 85 90 49 8 96 96 5 87 73 4 41 99 32 35 95 1 31 99 3 49 18 75 100 58 47 68 35 60 5 38 16 70 54 40 52 95 55 47 54 17 45 9 83 75 97 66 81 9 48 92 90 95 96 4 27 27 75 22 48 62 7 55 79 3 57 15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pajek','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"163"
        },
		{
            "algorithm":"bottleneck",
            "category":"KcenterAlgorithm",
			"description":"Using the Hochbaum-Shmoys algorithm (bottleneck variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"score",
            "category":"KcenterAlgorithm",
			"description":"Using the Score algorithm (elimination heuristics), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"CDS",
            "category":"KcenterAlgorithm",
			"description":"Using the Critical Dominating Set algorithm, solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":" 100 200 5   1 2 30   2 3 46   3 4 1   4 5 28   5 6 31   6 7 69   7 8 39   8 9 14   9 10 84   10 11 59   11 12 10   12 13 28   13 14 63   14 15 9   15 16 100   16 17 98   17 18 70   18 19 94   19 20 22   20 21 14   21 22 87   22 23 82   23 24 55   24 25 2   25 26 32   26 27 77   27 28 95   28 29 29   29 30 59   30 31 91   31 32 89   32 33 50   33 34 40   34 35 88   35 36 94   36 37 60   37 38 21   38 39 89   39 40 47   40 41 63   41 42 45   42 43 46   43 44 24   44 45 77   45 46 60   46 47 45   47 48 50   48 49 93   49 50 22   50 51 84   51 52 16   52 53 85   53 54 68   54 55 93   55 56 37   56 57 26   57 58 29   58 59 38   59 60 10   60 61 32   61 62 67   62 63 66   63 64 52   64 65 19   65 66 39   66 67 12   67 68 86   68 69 72   69 70 73   70 71 65   71 72 2   72 73 8   73 74 96   74 75 43   75 76 39   76 77 61   77 78 90   78 79 8   79 80 58   80 81 91   81 82 58   82 83 13   83 84 79   84 85 59   85 86 28   86 87 46   87 88 24   88 89 63   89 90 81   90 91 14   91 92 52   92 93 64   93 94 75   94 95 71   95 96 51   96 97 75   97 98 57   98 99 31   99 100 49   100 1 88   80 5 90   85 69 51   20 19 30   85 13 22   81 95 54   58 73 37   64 51 89   39 76 89   13 8 77   91 76 51   52 95 96   91 75 33   80 91 84   35 80 46   54 86 35   30 70 5   19 7 9   74 53 50   11 37 4   19 92 70   62 94 96   60 52 34   24 59 63   42 45 68   19 60 53   60 27 86   15 50 31   38 18 27   81 30 99   1 29 6   22 52 11   54 59 75   5 7 8   41 44 80   41 76 42   44 12 56   61 65 73   20 93 35   9 99 28   45 68 19   16 79 96   13 42 3   68 4 28   58 17 60   21 81 34   35 7 7   21 14 82   26 32 26   6 63 83   31 69 53   91 78 32   45 59 33   42 57 5   8 53 66   65 94 61   94 90 63   73 33 88   39 21 59   42 85 34   30 57 37   34 94 52   62 38 56   26 29 20   48 98 53   4 33 45   31 63 82   8 52 31   37 81 14   50 27 16   27 14 48   88 33 8   56 30 76   87 91 17   33 49 77   70 30 74   25 99 19   95 30 96   14 85 90   49 8 96   96 5 87   73 4 41   99 32 35   95 1 31   99 3 49   18 75 100   58 47 68   35 60 5   38 16 70   54 40 52   95 55 47   54 17 45   9 83 75   97 66 81   9 48 92   90 95 96   4 27 27   75 22 48   62 7 55   79 3 57   15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['pmed']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"127"
        },
		{
            "algorithm":"CDSh",
            "category":"KcenterAlgorithm",
			"description":"Using the Critical Dominating Set algorithm (binary search variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"*vertices 100 *arcs 1 2 30 2 3 46 3 4 1 4 5 28 5 6 31 6 7 69 7 8 39 8 9 14 9 10 84 10 11 59 11 12 10 12 13 28 13 14 63 14 15 9 15 16 100 16 17 98 17 18 70 18 19 94 19 20 22 20 21 14 21 22 87 22 23 82 23 24 55 24 25 2 25 26 32 26 27 77 27 28 95 28 29 29 29 30 59 30 31 91 31 32 89 32 33 50 33 34 40 34 35 88 35 36 94 36 37 60 37 38 21 38 39 89 39 40 47 40 41 63 41 42 45 42 43 46 43 44 24 44 45 77 45 46 60 46 47 45 47 48 50 48 49 93 49 50 22 50 51 84 51 52 16 52 53 85 53 54 68 54 55 93 55 56 37 56 57 26 57 58 29 58 59 38 59 60 10 60 61 32 61 62 67 62 63 66 63 64 52 64 65 19 65 66 39 66 67 12 67 68 86 68 69 72 69 70 73 70 71 65 71 72 2 72 73 8 73 74 96 74 75 43 75 76 39 76 77 61 77 78 90 78 79 8 79 80 58 80 81 91 81 82 58 82 83 13 83 84 79 84 85 59 85 86 28 86 87 46 87 88 24 88 89 63 89 90 81 90 91 14 91 92 52 92 93 64 93 94 75 94 95 71 95 96 51 96 97 75 97 98 57 98 99 31 99 100 49 100 1 88 80 5 90 85 69 51 20 19 30 85 13 22 81 95 54 58 73 37 64 51 89 39 76 89 13 8 77 91 76 51 52 95 96 91 75 33 80 91 84 35 80 46 54 86 35 30 70 5 19 7 9 74 53 50 11 37 4 19 92 70 62 94 96 60 52 34 24 59 63 42 45 68 19 60 53 60 27 86 15 50 31 38 18 27 81 30 99 1 29 6 22 52 11 54 59 75 5 7 8 41 44 80 41 76 42 44 12 56 61 65 73 20 93 35 9 99 28 45 68 19 16 79 96 13 42 3 68 4 28 58 17 60 21 81 34 35 7 7 21 14 82 26 32 26 6 63 83 31 69 53 91 78 32 45 59 33 42 57 5 8 53 66 65 94 61 94 90 63 73 33 88 39 21 59 42 85 34 30 57 37 34 94 52 62 38 56 26 29 20 48 98 53 4 33 45 31 63 82 8 52 31 37 81 14 50 27 16 27 14 48 88 33 8 56 30 76 87 91 17 33 49 77 70 30 74 25 99 19 95 30 96 14 85 90 49 8 96 96 5 87 73 4 41 99 32 35 95 1 31 99 3 49 18 75 100 58 47 68 35 60 5 38 16 70 54 40 52 95 55 47 54 17 45 9 83 75 97 66 81 9 48 92 90 95 96 4 27 27 75 22 48 62 7 55 79 3 57 15 69 46 ",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"129"
        },
		{
            "algorithm":"CDSP",
            "category":"KcenterAlgorithm",
			"description":"Using the Critical Dominating Set algorithm (every possible starting vertice, only best score is returned), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        },
		{
            "algorithm":"CDSPh",
            "category":"KcenterAlgorithm",
			"description":"Using the Critical Dominating Set algorithm (every possible starting vertice, only best score is returned - binary search variant), solves k-center problem for given graph. Uses minimax criterion. Returns sum of costs.",
			"inputFormat":"Graph vertices and edges have to be given in one of three formats.; Pmed:<number of vertices> <number of edges> <number of centers> followed by edges <starting vertice> <ending vertice> <cost> separated by spaces; Graph: [Nodes] Followed by (name,[0,0],[0,0]) for each vertice, separated by spaces. [Nodes] followed by (name, [<starting vertice>,<ending vertice>],[0,<cost>] for each edge, separated by spaces; Pajek: *vertices <number of vertices> *arcs followed by edges <starting vertice> <ending vertice> <cost>, separated by spaces.",
			"inputExample":"[Nodes] (N0, [0,0], [0,0]) (N1, [0,0], [0,0]) (N2, [0,0], [0,0]) (N3, [0,0], [0,0]) (N4, [0,0], [0,0]) (N5, [0,0], [0,0]) (N6, [0,0], [0,0]) (N7, [0,0], [0,0]) (N8, [0,0], [0,0]) (N9, [0,0], [0,0]) [Edges] (E0, [3,5], [35,68]) (E1, [5,7], [97,38]) (E2, [1,3], [55,37]) (E3, [0,1], [69,48]) (E4, [6,4], [8,100]) (E5, [1,7], [85,86]) (E6, [9,3], [42,9]) (E7, [2,9], [29,45]) (E8, [7,6], [78,62]) (E9, [6,8], [86,48])",
			"parametersFormat":"Parameter 1: Input format; Options: 'pmed', 'graph', 'pajek';Parameter 2: number of centers; Required if format equals 'graph' or 'pajek'",
            "parametersExample":"['graph','5']",
			"outputFormat":"A number representing sum of costs is returned",
			"outputExample":"48"
        }
    ]
}